# -*- coding: utf-8 -*-
"""freshify.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ykqDLSpKpswcyRSxVjpRZaFv5V7bXTgZ
"""


# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import cv2
# import torch
# import numpy as np
# import cvzone
# from PIL import Image
# from io import BytesIO
# from torchvision import transforms
# from net import Net as FreshnessNet  # Adjust based on actual import path
# from net1 import Net as ClassificationNet  # Adjust based on actual import path
# from ultralytics import YOLO

FRESHNESS_MODEL_FILE = "model.pt"
FV_MODEL_FILE = "final.pth"
YOLO_MODEL_FILE = "best.pt"

FRESHNESS_MODEL = None
FV_MODEL = None
YOLO_MODEL = None

import streamlit as st

def get_freshness_model():
    global FRESHNESS_MODEL
    if FRESHNESS_MODEL is None:
        FRESHNESS_MODEL = FreshnessNet()
        FRESHNESS_MODEL.load_state_dict(torch.load(FRESHNESS_MODEL_FILE))
        FRESHNESS_MODEL.eval()
    return FRESHNESS_MODEL

def get_fv_model():
    global FV_MODEL
    if FV_MODEL is None:
        FV_MODEL = ClassificationNet(num_classes=11)
        FV_MODEL.load_state_dict(torch.load(FV_MODEL_FILE))
        FV_MODEL.eval()
    return FV_MODEL

def get_yolo_model():
    global YOLO_MODEL
    if YOLO_MODEL is None:
        YOLO_MODEL = YOLO(YOLO_MODEL_FILE)
    return YOLO_MODEL

class_labels = {
    0: 'apple',
    1: 'banana',
    2: 'cucumber',
    3: 'grape',
    4: 'guava',
    5: 'mango',
    6: 'orange',
    7: 'pineapple',
    8: 'strawberry',
    9: 'tomato',
    10: 'watermelon'
}

def freshness_label(freshness_percentage):
    if freshness_percentage > 90:
        return "Fresh!"
    elif freshness_percentage > 65:
        return "Good!."
    elif freshness_percentage > 50:
        return "Fair!"
    elif freshness_percentage > 0:
        return "Poor!"
    else:
        return "Rotten!"

def freshness_percentage_by_cv_image(cv_image):
    mean = (0.7369, 0.6360, 0.5318)
    std = (0.3281, 0.3417, 0.3704)
    transformation = transforms.Compose([
        transforms.ToTensor(),
        transforms.Normalize(mean, std)
    ])
    image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (32, 32), interpolation=cv2.INTER_AREA)
    image = transformation(image).unsqueeze(0)
    model = get_freshness_model()
    with torch.no_grad():
        output = model(image)
        _, predicted = torch.max(output.data, 1)
    return predicted.item()

def classify_fruit_vegetable(cv_image):
    transformation = transforms.Compose([
        transforms.ToTensor(),
        transforms.Resize((64, 64)),
    ])
    image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
    image_tensor = transformation(image)
    batch = image_tensor.unsqueeze(0)
    model = get_fv_model()
    with torch.no_grad():
        out = model(batch)
    _, predicted = torch.max(out, 1)
    return class_labels[predicted.item()]

def process_frame(cv_image):
    yolo_model = get_yolo_model()
    results = yolo_model(cv_image)
    for r in results:
        boxes = r.boxes
        for box in boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            roi = cv_image[y1:y2, x1:x2]
            freshness_percentage = freshness_percentage_by_cv_image(roi)
            fruit_vegetable_name = classify_fruit_vegetable(roi)
            label_text = f"{fruit_vegetable_name} - {freshness_label(freshness_percentage)}"
            cvzone.putTextRect(cv_image, label_text, (x1, y1 - 10), scale=1, thickness=2)
            cvzone.cornerRect(cv_image, (x1, y1, x2 - x1, y2 - y1))
    return cv_image

def main():
    st.title("Fruits and Vegetables Classification")
    st.write("Upload an image of a fruit or vegetable:")

    uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "png", "jpeg"])

    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        image = np.array(image)
        processed_img = process_frame(image)
        st.image(processed_img, channels="BGR")

if __name__ == "__main__":
    main()


